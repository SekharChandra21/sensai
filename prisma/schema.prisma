// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(uuid())
  clerkUserId     String       @unique
  email           String       @unique
  name            String?
  imageUrl        String?
  industry        String?    //Combined industry-subindustry(eg : "tech-software-development")
  industryInsight  IndustryInsight?  @relation(fields: [industry],references: [industry])
  createdAt        DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Profile fields
  bio             String?
  experience      Int?
  skills          String[]

  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
}

model Assessment{
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  quizScore       Float           //overall score
  questions       Json[]          // Array of questions, answersm userAnswer, isCorrect
  category        String          // Technical, Behavioral , etc
  imporvementTip  String          // AI-generated improvement tip
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
}

model Resume{
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
  content         String          @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

}

model CoverLetter{
  id              String          @id @default(cuid())
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id])
  content         String          
  jobDescription  String?
  companyName     String
  jobTitle        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
}

model IndustryInsight{
  id              String          @id @default(cuid())
  industry        String          @unique
  users           User[]

  // Salary data
  salaryRange     Json[]           //Array of {role: string, min: float, max: float, median: float,location: string?}

  // industry trends
  growthRate      Float            // industry growth rate
  demandLevel     DemandLevel           // High, Medium , Low
  topSkills       String[]         // Most in-demand skills

  marketOutlook   MarkOutlook           // Positive, Neutral,  Negative
  keyTrends       String[]          // Array of current industry trends

  recommendedSkills  String[]       // Skills recommended for the industry

  lastUpdated       DateTime        @default(now())
  nextUpdate        DateTime         // Scheduled update time

  @@index([industry])
}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}

enum MarkOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}